// Code generated by tool; DO NOT EDIT.
package syntax

type Result struct {
	 Value any 
	 Err error
}

type ExprVisitor interface {
	VisitAssignExpr(*Assign) Result
	VisitLogicalExpr(*Logical) Result
	VisitBinaryExpr(*Binary) Result
	VisitUnaryExpr(*Unary) Result
	VisitCallExpr(*Call) Result
	VisitGetExpr(*Get) Result
	VisitSetExpr(*Set) Result
	VisitGroupingExpr(*Grouping) Result
	VisitLiteralExpr(*Literal) Result
	VisitVariableExpr(*Variable) Result
	VisitAnonymousFunctionExpr(*AnonymousFunction) Result
}

type Expr interface {
	 Accept(ExprVisitor) Result
}

type Assign struct {
	Name Token
	Value Expr
}
func NewAssign(name Token, value Expr) *Assign {
	return &Assign{
		Name: name,
		Value: value,
	}
}
func (n *Assign) Accept(v ExprVisitor) Result {
	return v.VisitAssignExpr(n)
}

type Logical struct {
	Left Expr
	Operator Token
	Right Expr
}
func NewLogical(left Expr, operator Token, right Expr) *Logical {
	return &Logical{
		Left: left,
		Operator: operator,
		Right: right,
	}
}
func (n *Logical) Accept(v ExprVisitor) Result {
	return v.VisitLogicalExpr(n)
}

type Binary struct {
	Left Expr
	Operator Token
	Right Expr
}
func NewBinary(left Expr, operator Token, right Expr) *Binary {
	return &Binary{
		Left: left,
		Operator: operator,
		Right: right,
	}
}
func (n *Binary) Accept(v ExprVisitor) Result {
	return v.VisitBinaryExpr(n)
}

type Unary struct {
	Right Expr
	Operator Token
}
func NewUnary(right Expr, operator Token) *Unary {
	return &Unary{
		Right: right,
		Operator: operator,
	}
}
func (n *Unary) Accept(v ExprVisitor) Result {
	return v.VisitUnaryExpr(n)
}

type Call struct {
	Callee Expr
	Paren Token
	Arguments []Expr
}
func NewCall(callee Expr, paren Token, arguments []Expr) *Call {
	return &Call{
		Callee: callee,
		Paren: paren,
		Arguments: arguments,
	}
}
func (n *Call) Accept(v ExprVisitor) Result {
	return v.VisitCallExpr(n)
}

type Get struct {
	Object Expr
	Name Token
}
func NewGet(object Expr, name Token) *Get {
	return &Get{
		Object: object,
		Name: name,
	}
}
func (n *Get) Accept(v ExprVisitor) Result {
	return v.VisitGetExpr(n)
}

type Set struct {
	Object Expr
	Name Token
	Value Expr
}
func NewSet(object Expr, name Token, value Expr) *Set {
	return &Set{
		Object: object,
		Name: name,
		Value: value,
	}
}
func (n *Set) Accept(v ExprVisitor) Result {
	return v.VisitSetExpr(n)
}

type Grouping struct {
	Expression Expr
}
func NewGrouping(expression Expr) *Grouping {
	return &Grouping{
		Expression: expression,
	}
}
func (n *Grouping) Accept(v ExprVisitor) Result {
	return v.VisitGroupingExpr(n)
}

type Literal struct {
	Value any
}
func NewLiteral(value any) *Literal {
	return &Literal{
		Value: value,
	}
}
func (n *Literal) Accept(v ExprVisitor) Result {
	return v.VisitLiteralExpr(n)
}

type Variable struct {
	Name Token
}
func NewVariable(name Token) *Variable {
	return &Variable{
		Name: name,
	}
}
func (n *Variable) Accept(v ExprVisitor) Result {
	return v.VisitVariableExpr(n)
}

type AnonymousFunction struct {
	Decl *Function
}
func NewAnonymousFunction(decl *Function) *AnonymousFunction {
	return &AnonymousFunction{
		Decl: decl,
	}
}
func (n *AnonymousFunction) Accept(v ExprVisitor) Result {
	return v.VisitAnonymousFunctionExpr(n)
}

